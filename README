User Documentation
------------------

http://expanz.com/docs/client-technologies/javascript-sdk/


Building the SDK
----------------

The expanz SDK comes with 3 supported ways of bundling and minification:

1. ASP.NET 4.5 has bundling and minification for release builds built in.  Simply reference each .js file in the site master
   of your target project in the order specified in the .bundle files under the build folder, and follow the instructions 
   in Scott Guthrie's blog post here: http://weblogs.asp.net/scottgu/archive/2011/11/27/new-bundling-and-minification-support-asp-net-4-5-series.aspx

2. If you have the Web Essentials 2012 extension for Visual Studio 2012 installed (http://visualstudiogallery.msdn.microsoft.com/07d54d12-7133-4e15-becb-6f451ea3bea6)
   then the bundled and minified files in the build folder will automatically update when the source files are changed, or
   if the project is built. The configuration for the bundling/minification can be found in the .bundle files in the build
   folder. The output will also be written to the build folder.

3. Support for the Microsoft Ajax Minifier (http://ajaxmin.codeplex.com) is also built in, enabling the SDK to be built on
   a build server. This outputs to the build folder, but note that it *does not* create the bundled but not minified file
   like Web Essentials 2012 creates.


Deploying the SDK
-----------------

You'll also note that there are two NuGet package specification manifests under the build folder:
 
 - expanz-javascript-sdk.1.0.0.nuspec - This package allows the bundled and minified SDK (with all three outputs listed shortly)
   to be consumed easily in a target project.

 - expanz-javascript-sdk-source.1.0.0.nuspec - This package provides the full SDK source code, along with the bundled and minified 
   files (with all three outputs listed shortly) to be consumed easily in a target project.

You can use one of the packages generated by these files to import the SDK and its dependencies into your target project in Visual 
Studio. The project is already configured (in the post-build event) to compile the NuGet packages (.nupkg) when you build the 
project and outputs them to the build folder. However, it does expect that the NuGet.exe file be found in the build folder. You can
download this file from http://nuget.codeplex.com/releases/view/58939.

To consume the packages in your target web application project, you will need to configure your Visual Studio to use this path 
as a package source (go to Options, Package Manager > Package Sources) and it will configure the required files under a Scripts 
folder in your project.

NOTE: There currently is no automation of the NuGet package version numbers. For now you will need to manually update the 
      version element in the NuGet specification files as required.


Another means to consume the SDK is to create a virtual folder under your target project that points to the location of this 
project, enabling you to directly consume the .js files in this project.


Outputs
-------

- expanz-sdk.min.js - the core expanz JavaScript SDK

- expanz-kendoui-adapters.min.js - allows the expanz SDK to support Kendo UI controls

- expanz-components.min.js - includes a prebuilt shopping cart component


Using the SDK
-------------

- In order for IIS to serve up files with the .properties extension (used for message text conversion/
  transformation), you need to add the .properties extension to your root web.config file as a mime
  type mapping, like so:

<configuration>
  <system.webServer>
    <staticContent>
      <mimeMap fileExtension=".properties" mimeType="text/plain" />
    </staticContent>
  </system.webServer>
</configuration>


- To configure some of the functionality of the SDK, you're target project will need to define a config object, with the
  following options (and example values):

window.config = {
	appSite: 'MySite',
	authenticationMode: 'Alternate',
	backButton: true,
	formmappingFormat: '[p]',
	homePage: 'Home',
	implementationId: '',
	loginPage: 'Login',
	maintenancePage: 'Maintenance',
	messageBundlePath: 'assets/',
	onMaintenance: false,
	showAllMessages: false,
	timeFormat: 12,
	urlBlobs: 'http://xxx.com/downloads/blobs/',
	urlPrefix: '',
	urlProxy: '/ESAProxy.ashx',
	useBundle: true,
	xmlNamespace: 'http://www.expanz.com/ESAService'
};

- You'll also need an HTTP Handler to act as a proxy between the client and the ESA web service.
  Instructions to come.