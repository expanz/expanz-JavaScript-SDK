// Pull the plugin from a Maven Repo
buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
    }
    dependencies {
        classpath 'com.eriwen:gradle-js-plugin:1.1'
    }
}

buildscript {
    configurations.classpath.resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

repositories {
    mavenLocal()
    mavenCentral()
}

// Invoke the plugin
apply plugin: 'js'

ext {
	jsPublicDir = "../public/"
	jsSrcDir = "${buildDir}/../"
	jsSrcDir = "${buildDir}/../components/"
	//env = System.getenv()
	//jsVersion = "" //${env.BUILD_NUMBER}.
}
project.buildDir = '../public/js/min'
def jsVersion = Integer.toHexString(Integer.parseInt(new java.text.SimpleDateFormat('yyDDHHmm').format(new Date())))

// Declare your sources
javascript.source {
    custom {
        js {
            srcDir jsSrcDir
            include "*.js"
            exclude ["*.min.js","*.min.gzip.js"]
        }
    }
}

//task clean(type: Delete) {
//	println 'Cleaning files'
//   delete buildDir
//}

// Combine JS files
task combinejs(type: com.eriwen.gradle.js.tasks.CombineJsTask) {
	println "Combining ${jsVersion}"
    //source = "${buildDir}/../components/shoppingCart.js"
    source = javascript.source.custom.js.files
    dest = "${buildDir}/components.${jsVersion}.js"
	//println source
	//println dest
}
task minifyjs(type: com.eriwen.gradle.js.tasks.MinifyJsTask) {
	println "Minifying ${jsVersion}"
    source = combinejs
    dest = file("${buildDir}/components.${jsVersion}.min.js")
    closure {
        warningLevel = 'QUIET'
        compilationLevel = 'ADVANCED_OPTIMIZATIONS'
    }
}

task gzipjs(type: com.eriwen.gradle.js.tasks.GzipJsTask) {
	println "Compressing ${jsVersion}"
    source = minifyjs
    dest = file("${buildDir}/components.${jsVersion}.min.gzip.js")
}
task jshintjs(type: com.eriwen.gradle.js.tasks.JsHintTask) {
    source = javascript.source.custom.js.files
    dest = file("${buildDir}/../../../build/jshint.out")
}

// Minify with Google Closure Compiler
//minifyJs {
//	println 'Minifying combined file'
	//println "${buildDir}"
	//println "${projectDir}"
//    dest = file("${buildDir}/shoppingCart.${jsVersion}.min.js")
//    source = "${buildDir}/shoppingCart.${jsVersion}.js"
	//source = combine
//	println source
//	println dest
//    closure {
//        warningLevel = 'VERBOSE'
//        compilationLevel = 'ADVANCED_OPTIMIZATIONS'
//        //externs = files("src/test/resources/externs.js")
//    }
//}

// Specify a collection of files to be combined, then minified and finally GZip compressed.
//combineJs  {
//	println 'Combining files'
//	dependsOn << 'clean'
 //   ext.file1 = fileTree(dir: "${jsDir}", includes: ['shoppingCart.js'])

    //inputs.files file1
//    outputs.file file("${jsDir}/min/shoppingCart.${jsVersion}js")
//}

// Specify a collection of files to be combined, then minified and finally GZip compressed.
//minifyJs  {
//	println 'Minifying combined file'
//	dependsOn << 'combineJs'
 //   ext.file1 = fileTree(dir: "${jsDir}/min/", includes: ["shoppingCart.${jsVersion}js"])
//    inputs.files file1 
//    outputs.file file("${jsDir}/min/shoppingCart.${jsVersion}min.js")
//}

// Specify a collection of files to be combined, then minified and finally GZip compressed.
//gzipJs  {
//	println 'Zipping minified file'
//	dependsOn << 'minifyJs'
 //   ext.file1 = fileTree(dir: "${jsDir}/min/", includes: ["shoppingCart.${jsVersion}min.js"])
 //   inputs.files file1 
//    outputs.file file("${jsDir}/min/shoppingCart.${jsVersion}min.gzip.js")
//}

//task clean {
//	println 'Cleaning files'
//	doLast {
//		ant.delete(dir: "${jsDir}/min/")
//	}
//}

//task minify (dependsOn: ['gzipJs'] ){ 
//	println "Starting minifying version ${env.BUILD_NUMBER}"
//}




